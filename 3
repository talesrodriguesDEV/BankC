#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <time.h>

int ContClientes = 0;
int ContContas = 0;
int ContTransacoes = 0;
int NumContas[101] = {0};

struct conta{
	long int agencia;
	long int NumConta;
	float saldo;		
};

struct conta contas[201];

struct cliente{
	long int codigo;
	char nome[50];
	long int CPF;
	long int CNPJ;
	long int telefone;
	char endereco[50];
	struct conta contas[201];		
};

struct cliente clientes[101];

struct transacao{
	char tipo;
	int valor;
	char data[10];	
	char descricao[100];
	struct conta contas[1];
}; 

struct transacao transacoes[1001];

void AdcionarClientes(){
	
	system("cls");		
	ContClientes++;			
	
	printf("Insira os dados do novo cliente.\n");
	printf("Código: ");	
	fflush(stdin);
	scanf("%d", &clientes[ContClientes].codigo);
		
	printf("Nome: ");								
	fflush(stdin);
	scanf("%[^\n]s", clientes[ContClientes].nome);								
			
	char pessoa;
	printf("Pessoa Física ou Jurídica ?\n");
	printf("F - Pessoa Física.\n");
	printf("J - Pessoa Jurídica.\n");	
	person:
	fflush(stdin);
	scanf("%c", &pessoa);
	
	switch(pessoa){
		case 'F':
		case 'f':
			printf("Digite o seu CPF: ");
			fflush(stdin);
			scanf("%d", &clientes[ContClientes].CPF);
		break;
		
		case 'J':
		case 'j':
			printf("Digite o seu CNPJ: ");
			fflush(stdin);
			scanf("%d", &clientes[ContClientes].CNPJ);	
		break;
		
		default:						
			printf("Por favor, digite um comando válido.\n");
			system("pause");																				
			goto person;
		
	}
		
	printf("Telefone: ");
	fflush(stdin);
	scanf("%d", &clientes[ContClientes].telefone);
		
	printf("Endereço: ");								
	fflush(stdin);
	scanf("%[^\n]s", clientes[ContClientes].endereco);	
								
} 

void PrintNotas50(){
	printf("Você receberá:\n");
	printf("5 notas de 2 reais,\n");
	printf("2 notas de 5 reais,\n");
	printf("1 nota de 10 reais e\n");
	printf("1 nota de 20 reais.\n");
}

void PrintNotas100(){
	printf("Você receberá:\n");
	printf("5 notas de 2 reais.\n");
	printf("2 notas de 5 reais.\n");
	printf("1 nota de 10 reais.\n");
	printf("1 nota de 20 reais.\n");
	printf("1 nota de 50 reais.\n");
}

void PrintNotas200(){
	printf("Você receberá:\n");
	printf("5 notas de 2 reais.\n");
	printf("2 notas de 5 reais.\n");
	printf("1 nota de 10 reais.\n");
	printf("1 nota de 20 reais.\n");
	printf("1 nota de 50 reais.\n");
	printf("1 nota de 100 reais.\n");
}

void PrintNotas500(){
	printf("Você receberá:\n");
	printf("5 notas de 2 reais.\n");
	printf("2 notas de 5 reais.\n");
	printf("1 nota de 10 reais.\n");
	printf("1 nota de 20 reais.\n");
	printf("1 nota de 50 reais.\n");
	printf("2 notas de 100 reais.\n");
	printf("1 nota de 200 reais.\n");
}

int main(void) {
	
	//FORMATAÇÃO	
	setlocale(LC_ALL, "Portuguese");	
	system("color F9");
	
	//DATA
	time_t rawtime;
	struct tm *timeinfo;		
	time(&rawtime);
	timeinfo = localtime(&rawtime);
		
	//PONTEIROS
	FILE *arquivo;
		
	//MENU PRINCIPAL
	MenuPrincipal:
	printf("=============== Bem vindo! =================\n");
	printf("Digite um comando para prosseguir:\n");
	printf("C - Gerenciar Clientes\n");
	printf("T - Gerenciar Contas\n");
	printf("S - Sair\n");		
	
	char comando;
	fflush(stdin);
	comando = getc(stdin);	
	
	switch(comando){
	
		//GESTÃO DE CLIENTES
		case 'C':
		case 'c':	
			MenuClientes:
			system("cls");
			printf("============ Gerenciar Clientes ============\n");
			printf("Digite um comando para prosseguir:\n");
			printf("C - Cadastrar um cliente\n");
			printf("L - Listar todos os clientes cadastrados\n");
			printf("B - Buscar cliente já cadastrado\n");
			printf("A - Atualizar um cliente cadastrado\n");
			printf("E - Excluir um cliente cadastrado\n");
			printf("S - Sair\n");		
					
						char comando2;
						fflush(stdin);
						comando2 = getc(stdin);	
						
						switch(comando2){
							
							//CADASTRAR CLIENTE				
							case 'C':
							case 'c':					
								system("cls");									
								AdcionarClientes();
								if(ContClientes == 0){
									arquivo = fopen("Clientes.txt", "w");
								} else {								
									arquivo = fopen("Clientes.txt", "a");
									}								
								fprintf(arquivo, 
								"Código: %d;\nNome: %s;\nCPF: %d;\nCNPJ: %d;\nTelefone: %d;\nEndereço: %s;\n\n", 
								clientes[ContClientes].codigo, clientes[ContClientes].nome,
								clientes[ContClientes].CPF,	clientes[ContClientes].CNPJ,
								clientes[ContClientes].telefone, clientes[ContClientes].endereco);
								fclose(arquivo);								
								system("cls");
								printf("Dados salvos com sucesso.\n");
								system("pause");
								goto MenuClientes;																						
								//conferência de repetição e salvamento opcional :)
							break;		
							
							//LISTAR CLIENTES CADASTRADOS
							case 'L':
							case 'l':	
								system("cls");
								if(ContClientes == 0){
									printf("Nenhum cliente cadastrado.\n");
									system("pause");
									system("cls");
									goto MenuClientes;
								}
								else{																
									int i = 1;									
									for(i = 1; i <= ContClientes; i++){																													
											printf("Código: %d\n", clientes[i].codigo);
											printf("Nome: %s\n", clientes[i].nome);
											if(clientes[i].CNPJ == 0){
												printf("CPF: %d\n", clientes[i].CPF);
											} else{
												printf("CNPJ: %d\n", clientes[i].CNPJ);
											}																			
											printf("Telefone: %d\n", clientes[i].telefone);
											printf("Endereço: %s\n", clientes[i].endereco);	
											printf("\n");											
									}																								
								system("pause"); 
								system("cls");
								goto MenuClientes;								
								}
								//ordem alfabética							
							break;
		
							//BUSCAR CLIENTE
							case 'B':
							case 'b':	
								BuscaClientes:
								system("cls");								
								printf("Deseja buscar através de código, nome ou CPF/CNPJ ?\n");
								printf("C - Código\n");
								printf("N - Nome\n");
								printf("F - CPF\n");
								printf("J - CNPJ\n");								
								char comando2a;
								int codbusca;
								char codbusca2[50];
								int j = 1;
								fflush(stdin);
								scanf("%c", &comando2a);
								switch(comando2a){
									case 'C':
									case 'c':																														
										printf("Digite o código do cliente procurado: ");
										fflush(stdin);
										scanf("%d", &codbusca);
										if(codbusca == clientes[j].codigo && codbusca != 0){		
											for(j = 1; j <= ContClientes; j++){											
												printf("Código: %d\n", clientes[j].codigo);
												printf("Nome: %s\n", clientes[j].nome);
												if(clientes[j].CNPJ == 0){
													printf("CPF: %d\n", clientes[j].CPF);
												} else{
													printf("CNPJ: %d\n", clientes[j].CNPJ);
													}																			
												printf("Telefone: %d\n", clientes[j].telefone);
												printf("Endereço: %s\n", clientes[j].endereco);	
												printf("\n");
											}
											system("pause");
											system("cls");
											goto MenuClientes;	
										} else {
												system("cls");
												printf("Cliente não encontrado.\n");
												system("pause");
												system("cls");
												goto BuscaClientes;												
											}																			
									break;
									
									case 'N':
									case 'n':										
										printf("Digite o Nome do cliente procurado: ");
										fflush(stdin);
										scanf("%[^\n]s", codbusca2);
										if(strncmp(codbusca2, clientes[j].nome, 50) == 0){
											for(j = 1; j <= ContClientes; j++){											
												printf("Código: %d\n", clientes[j].codigo);
											printf("Nome: %s\n", clientes[j].nome);
											if(clientes[j].CNPJ == 0){
												printf("CPF: %d\n", clientes[j].CPF);
											} else{
												printf("CNPJ: %d\n", clientes[j].CNPJ);
											}																			
											printf("Telefone: %d\n", clientes[j].telefone);
											printf("Endereço: %s\n", clientes[j].endereco);	
											printf("\n");
											} 
											system("pause");
											system("cls");
											goto MenuClientes;
										} else {
												system("cls");
												printf("Cliente não encontrado.\n");
												system("pause");
												system("cls");
												goto BuscaClientes;												
											}																			
									break;
																											
									case 'F':
									case 'f':
										printf("Digite o CPF do cliente procurado: ");
										fflush(stdin);
										scanf("%d", &codbusca);
										if(codbusca == clientes[j].CPF && codbusca != 0){	
											for(j = 1; j <= ContClientes; j++){											
												printf("Código: %d\n", clientes[j].codigo);
											printf("Nome: %s\n", clientes[j].nome);
											if(clientes[j].CNPJ == 0){
												printf("CPF: %d\n", clientes[j].CPF);
											} else{
												printf("CNPJ: %d\n", clientes[j].CNPJ);
											}																			
											printf("Telefone: %d\n", clientes[j].telefone);
											printf("Endereço: %s\n", clientes[j].endereco);	
											printf("\n");
											} 
											system("pause");
											system("cls");
											goto MenuClientes;
										} else {
												system("cls");
												printf("Cliente não encontrado.\n");
												system("pause");
												system("cls");
												goto BuscaClientes;												
											}																			
									break;
									
									case 'J':
									case 'j':
										printf("Digite o CNPJ do cliente procurado: ");
										fflush(stdin);
										scanf("%d", &codbusca);
										if(codbusca == clientes[j].CNPJ && codbusca != 0){	
											for(j = 1; j <= ContClientes; j++){										
												printf("Código: %d\n", clientes[j].codigo);
											printf("Nome: %s\n", clientes[j].nome);
											if(clientes[j].CNPJ == 0){
												printf("CPF: %d\n", clientes[j].CPF);
											} else{
												printf("CNPJ: %d\n", clientes[j].CNPJ);
											}																			
											printf("Telefone: %d\n", clientes[j].telefone);
											printf("Endereço: %s\n", clientes[j].endereco);	
											printf("\n");
											} 
											system("pause");
											system("cls");
											goto MenuClientes;
										} else {
												system("cls");
												printf("Cliente não encontrado.\n");
												system("pause");
												system("cls");
												goto BuscaClientes;												
											}																			
									break;	
																									
									default:								
										system("cls");
										printf("Por favor, digite um comando válido.\n");
										system("pause");														
										system("cls");
										goto BuscaClientes;									
								}																
							break;
		
							//ATUALIZAR CLIENTE
							case 'A':
							case 'a':	
								AtualizarCliente:
								system("cls");								
								printf("Digite o código o CPF ou o CNPJ do cliente: ");										
								int codbusca3;								
								int k = 1;								
								fflush(stdin);
								scanf("%d", &codbusca3);
								if(codbusca3 == clientes[k].codigo && codbusca3 != 0 ||
								codbusca3 == clientes[k].CPF && codbusca3 != 0 ||
								codbusca3 == clientes[k].CPF && codbusca3 != 0){		
									for(k = 1; k <= ContClientes; k++){											
										system("cls");
										int novocodigo;
										printf("Digite o novo código: ");
										fflush(stdin);
										scanf("%d", &novocodigo);
										clientes[k].codigo = novocodigo;
										char novonome[50];
										printf("Digite o novo nome: ");
										fflush(stdin);
										scanf("%[^\n]s", novonome);
										strcpy(clientes[k].nome, novonome);
										if(clientes[k].CPF == 0){
											long int novoCNPJ;
											printf("Digite o novo CNPJ: ");
											fflush(stdin);
											scanf("%d", &novoCNPJ);
											clientes[k].CNPJ = novoCNPJ;
										} else{												
											long int novoCPF;
											printf("Digite o novo CPF: ");
											fflush(stdin);
											scanf("%d", &novoCPF);
											clientes[k].CPF = novoCPF;													
											}
										long int novoTEL;
										printf("Digite o novo telefone: ");
										fflush(stdin);
										scanf("%d", &novoTEL);
										clientes[k].telefone = novoTEL;	
										char novoEND[50];
										printf("Digite o novo endereço: ");
										fflush(stdin);
										scanf("%[^\n]s", novoEND);
										strcpy(clientes[k].endereco, novoEND);
										break;																									
									}											
									system("cls");
									printf("Dados do cliente atualizados com sucesso.\n");
									system("pause");
									system("cls");
									goto MenuClientes;	
								} else {
									system("cls");
									printf("Cliente não encontrado.\n");
									system("pause");
									system("cls");
									goto AtualizarCliente;												
									}																															
							break;
				
							//EXCLUIR CLIENTE
							case 'E':
							case 'e':	
								ExcluirClientes:
								system("cls");								
								printf("Digite o código o CPF ou o CNPJ do cliente: ");																								
								int codbusca5;								
								int l = 1;																																															
								system("cls");
								printf("Digite o código do cliente procurado: ");
								fflush(stdin);
								scanf("%d", &codbusca5);
								if(codbusca5 == clientes[l].codigo && codbusca5 != 0){		
									for(l = 1; l <= ContClientes; l++){											
										printf("\n");
										printf("Código: %d\n", clientes[l].codigo);
										printf("Nome: %s\n", clientes[l].nome);
										if(clientes[l].CNPJ == 0){
											printf("CPF: %d\n", clientes[l].CPF);
										} else{
											printf("CNPJ: %d\n", clientes[l].CNPJ);
											}																			
										printf("Telefone: %d\n", clientes[l].telefone);
										printf("Endereço: %s\n", clientes[l].endereco);	
										printf("\n");
										ExcluirClientes2:
										printf("Deseja realmente excluir os dados acima ?\n");
										printf("S - Sim\n");
										printf("N - Não\n");
										char ConfExc;												
										fflush(stdin);
										scanf("%c", &ConfExc);
										switch(ConfExc){
											case 'S':
											case 's':
												for(l; l <= ContClientes; l++){
													clientes[l].codigo = clientes[l + 1].codigo;
													strcpy(clientes[l].nome, clientes[l + 1].nome);															
													clientes[l].CPF = clientes[l + 1].CPF;															
													clientes[l].CNPJ = clientes[l + 1].CNPJ;																
													clientes[l].telefone = clientes[l + 1].telefone;
													strcpy(clientes[l].endereco, clientes[l + 1].endereco);
												}
												ContClientes-=1;
												system("cls");
												printf("Dados excluídos com sucesso.\n");
												system("pause");
												system("cls");
												goto MenuClientes;	
											break;
													
											case 'N':
											case 'n':
												system("cls");
												goto ExcluirClientes;	
											break;
													
											default:
												system("cls");
												printf("Por favor, digite um comando válido.\n");
												system("pause");														
												system("cls");
												goto ExcluirClientes2;														
										}												
									}												
								} else {
									system("cls");
									printf("Cliente não encontrado.\n");
									system("pause");
									system("cls");
									goto ExcluirClientes;												
									}						
							break;
						
							//SAIR
							case 'S':
							case 's':	
								system("cls");	
								goto MenuPrincipal;
							break;
				
							//ERRO
							default:								
								system("cls");
								printf("Por favor, digite um comando válido.\n");
								system("pause");														
								system("cls");
								goto MenuClientes;
						}
		break;				
	
		//GESTÃO DE CONTAS
		case 'T':
		case 't':	
			MenuContas:
			system("cls");
			printf("Digite um comando para prosseguir:\n");
			printf("C - Cadastrar uma conta para um cliente.\n");
			printf("R - Listagem de todas as contas cadastradas.\n");			
			printf("L - Listar todas as contas de um cliente.\n");
			printf("W - Realizar um saque em uma conta.\n");
			printf("D - Realizar um depósito em uma conta.\n");
			printf("T - Realizar transferência entre contas.\n");
			printf("E - Exibir extrato de uma conta.\n");
			printf("S - Sair\n");
															
						char comando3;
						fflush(stdin);
						comando3 = getc(stdin);	
						
						switch(comando3){
							//CADASTRAR UMA CONTA
							case 'C':
							case 'c':																	
								system("cls");											
								printf("Digite o código ou o CPF/CNPJ do cliente: ");
								int CodConta;
								fflush(stdin);
								scanf("%d", &CodConta);	
								int m = 1;									
								for(m = 1; m <= ContClientes; m++){
									if(CodConta == clientes[m].codigo || CodConta == clientes[m].CPF
									|| CodConta == clientes[m].CNPJ){																				
										ContContas++;
										NumContas[m]++;			
										switch(NumContas[m]){			
											case 1:
												printf("Digite o número da agência: ");				
												fflush(stdin);
												scanf("%d", &clientes[m].contas[m].agencia);			
												printf("Digite o númeoro da conta: ");
												fflush(stdin);
												scanf("%d", &clientes[m].contas[m].NumConta);			
												clientes[m].contas[m].saldo = 0;			
											break;
				
											case 2:
												printf("Digite o número da agência: ");
												fflush(stdin);
												scanf("%d", &clientes[m].contas[m + 100].agencia);			
												printf("Digite o númeoro da conta: ");
												fflush(stdin);
												scanf("%d", &clientes[m].contas[m + 100].NumConta);			
												clientes[m].contas[m + 100].saldo = 0;					
											break;
										}
										system("cls");
										printf("Conta cadastrada com sucesso.\n");
										system("pause");
										system("cls");
										goto MenuContas;																			
									} 
								}								
								system("cls");						
								printf("Cliente não encontrado.\n");
								system("pause");
								system("cls");
								goto MenuContas;																				
							//conferência de repetição																										
							break;
							
							//LISTAR CONTAS CADASTRADAS
							case 'R':
							case 'r':	
								system("cls");
								int n = 1;
								if(ContContas == 0){									
									system("cls");
									printf("Nenhuma conta cadastrada.\n");
									system("pause");
									system("cls");
									goto MenuContas;								
								} else {									
									for(n = 1; n <= ContClientes; n++){
										if(clientes[n].contas[n].agencia != 0){									
											printf("Cliente: %s\n", clientes[n].nome);
											printf("Código: %d\n", clientes[n].codigo);
											if(clientes[n].contas[n + 100].agencia != 0){																																								
												printf("Conta 1\n");
												printf("Agência: %d\n", clientes[n].contas[n].agencia);
												printf("Número: %d\n", clientes[n].contas[n].NumConta);
												printf("Saldo: %.2f\n", clientes[n].contas[n].saldo);
												printf("Conta 2\n");
												printf("Agência: %d\n", clientes[n].contas[n + 100].agencia);
												printf("Número: %d\n", clientes[n].contas[n + 100].NumConta);
												printf("Saldo: %.2f\n", clientes[n].contas[n + 100].saldo);																																									
											} else{
												printf("Conta 1\n");
												printf("Agência: %d\n", clientes[n].contas[n].agencia);
												printf("Número: %d\n", clientes[n].contas[n].NumConta);
												printf("Saldo: %.2f\n", clientes[n].contas[n].saldo);
												}																							
											printf("\n");																					
										}
									}
									system("pause");
									system("cls");
									goto MenuContas;
								}
							//ordem alfabética e decrescente de saldo	
							break;
														
							//LISTAR CONTAS DE UM CLIENTE
							case 'L':
							case 'l':								
									
							break;
						
							//REALIZAR SAQUE
							case 'W':
							case 'w':																	
								
							break;
			
							//REALIZAR DEPÓSITO
							case 'D':
							case 'd':	
								system("cls");
								
							break;	
		
							//REALIZAR TRANSFERÊNCIA
							case 'T':
							case 't':	
								system("cls");
							break;
									
							//EXIBIR EXTRATO
							case 'E':
							case 'e':	
								system("cls");
							break;
						
							//SAIR 
							case 'S':
							case 's':	
								system("cls");	
								goto MenuPrincipal;
							break;
				
							//ERRO
							default:
								system("cls");
								printf("Por favor, digite um comando válido.\n");
								system("pause");														
								system("cls");
								goto MenuContas;
						}
		break;
	
		//SAIR	
		case 'S':
		case 's':	
			system("cls");
			system("exit");
		break;
		
		//ERRO
		default:			
			system("cls");
			printf("Por favor, digite um comando válido.\n");
			system("pause");
			getchar();
			system("cls");
			goto MenuPrincipal;	
	}
	return 0;
}
